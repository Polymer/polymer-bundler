#!/usr/bin/env node
var path = require('path');
var fs = require('fs');
var nopt = require('nopt');
var vulcan = require('../lib/vulcan.js');
var optparser = require('../lib/optparser.js');

var help = [
  'vulcanize: Concatenate a set of Web Components into one file',
  '',
  'Usage:',
  '  vulcanize [OPTIONS] <html file>*',
  '',
  'Options:',
  '  --output, -o: Output file name (defaults to vulcanized.html)',
  '  --verbose, -v: More verbose logging',
  '  --help, -h, -?: Print this message',
  '  --config: Read the given config file',
  '  --strip, -s: Remove comments and empty text nodes',
  '  --csp: Extract inline scripts to a separate file (uses <output file name>.js)',
  '  --inline: The opposite of CSP mode, inline all assets (script and css) into the document',
  '  --csp --inline: Bundle all javascript (inline and external) into <output file name>.js',
  '',
  'Config:',
  '  JSON file for additional options',
  '',
  '  {',
  '    "excludes": {',
  '      "imports": [ "regex-to-exclude" ],',
  '      "styles": [ "regex-to-exclude" ],',
  '      "scripts": [ "regex-to-exclude" ],',
  '    }',
  '  }'
];

function printHelp() {
  console.log(help.join('\n'));
  process.exit(0);
}

var optHash = nopt(
  {
    'config': path,
    'csp': Boolean,
    'help': Boolean,
    'inline': Boolean,
    'output': path,
    'strip': Boolean,
    'verbose': Boolean
  },
  {
    '?': ['--help'],
    'h': ['--help'],
    'o': ['--output'],
    's': ['--strip'],
    'v': ['--verbose']
  }
);

if (optHash.help || process.argv.length === 2) {
  printHelp();
}

var argv = optHash.argv.remain;

if (argv[0]) {
  optHash.input = path.resolve(argv[0]);
}

optparser.processOptions(optHash, function(err, options) {
  if (err) {
    console.error(err);
    process.exit(1);
  }
  vulcan.processDocument(options);
});
